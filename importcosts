#!/usr/bin/env python3

import pyexasol
import boto3
from datetime import datetime, timedelta
from configparser import ConfigParser
import os
import sys


class Cost:
    def __init__(self, account_uuid, start_date, end_date, amount):
        self.account_uuid = account_uuid
        self.start_date = start_date
        self.end_date = end_date
        self.amount = amount

    def __repr__(self):
        return f"Cost(account_uuid={self.account_uuid}, start_date={self.start_date}, end_date={self.end_date}, amount={self.amount})"


config = ConfigParser()
config.read(os.path.join(os.path.dirname(__file__), ".exasolrc"))

DB_DSN = config.get("connection", "dsn")
DB_USER = config.get("connection", "user")
DB_PASSWORD = config.get("connection", "password")
DB_SCHEMA = config.get("connection", "schema")


AWS_PROFILE = "166629205485_CostExplorerView"
ATTRIBUTION_TAG_KEY = "saas:AccountUUID"
AWS_CONTROL_PLANE_ACCOUNTS = [config.get("aws_accounts", "control_plane")]
AWS_CUSTOMER_ACCOUNTS = config.get("aws_accounts", "customer_accounts").split(",")


def with_connection(callback):
    connection = None
    try:
        connection = pyexasol.connect(
            dsn=DB_DSN, user=DB_USER, password=DB_PASSWORD, schema=DB_SCHEMA
        )
        return callback(connection)
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        if connection:
            connection.close()


def query(query):
    def execute_query(connection):
        result = connection.execute(query)
        return [row for row in result]

    return with_connection(execute_query)


def get_aws_credentials():
    aws_access_key = os.getenv("AWS_ACCESS_KEY_ID")
    aws_secret_key = os.getenv("AWS_SECRET_ACCESS_KEY")
    aws_session_token = os.getenv("AWS_SESSION_TOKEN")
    aws_region = os.getenv("AWS_DEFAULT_REGION", "us-east-1")

    if not aws_access_key or not aws_secret_key:
        credentials_path = os.path.expanduser("~/.aws/credentials")
        if os.path.exists(credentials_path):
            config = ConfigParser()
            config.read(credentials_path)
            aws_access_key = config.get(AWS_PROFILE, "aws_access_key_id", fallback=None)
            aws_secret_key = config.get(
                AWS_PROFILE, "aws_secret_access_key", fallback=None
            )
            aws_session_token = config.get(
                AWS_PROFILE, "aws_session_token", fallback=None
            )
            aws_region = config.get(AWS_PROFILE, "region", fallback=aws_region)

    if not aws_access_key or not aws_secret_key:
        raise EnvironmentError(
            "AWS credentials not set in environment variables or ~/.aws/credentials file."
        )

    return aws_access_key, aws_secret_key, aws_session_token, aws_region


def get_cost_and_usage(
    client, start_date, end_date, granularity, metrics, filters, group_by=None
):
    """
    Helper function to query AWS Cost Explorer and return results.
    """
    response = client.get_cost_and_usage(
        TimePeriod={"Start": start_date, "End": end_date},
        Granularity=granularity,
        Metrics=metrics,
        Filter=filters,
        GroupBy=group_by or [],
    )
    return response.get("ResultsByTime", [])


def get_monthly_cost_per_tag(client, month, linked_accounts, account_uuids=None):
    """
    Get monthly costs for resources with or without a specific tag.
    """
    start_date, end_date = get_start_and_end_date(month)

    if account_uuids is not None:
        tag_filter = {"Tags": {"Key": ATTRIBUTION_TAG_KEY, "Values": account_uuids}}
    else:
        tag_filter = {"Tags": {"Key": ATTRIBUTION_TAG_KEY, "MatchOptions": ["ABSENT"]}}

    filters = {
        "And": [
            {"Dimensions": {"Key": "LINKED_ACCOUNT", "Values": linked_accounts}},
            {"Dimensions": {"Key": "RECORD_TYPE", "Values": ["Usage"]}},
            tag_filter,
        ]
    }

    results_by_time = get_cost_and_usage(
        client,
        start_date,
        end_date,
        granularity="MONTHLY",
        metrics=["UnblendedCost"],
        filters=filters,
        group_by=[{"Type": "TAG", "Key": ATTRIBUTION_TAG_KEY}],
    )

    costs = []
    for result in results_by_time:
        groups = result.get("Groups", [])
        for group in groups:
            account_tag = group["Keys"][0]
            if account_uuids is not None:
                account_uuid = account_tag.split("$")[1]
            else:
                account_uuid = "NOT ATTRIBUTED"
            cost_amount = float(group["Metrics"]["UnblendedCost"]["Amount"])
            cost = Cost(account_uuid, start_date, end_date, cost_amount)
            costs.append(cost)
    return costs


def get_start_and_end_date(month):
    start_date = f"{month}-01"
    end_date = (
        datetime.strptime(start_date, "%Y-%m-%d").replace(day=28) + timedelta(days=4)
    ).strftime("%Y-%m-01")

    return start_date, end_date


def get_monthly_total_cost(client, month, linked_accounts, account_name):
    """
    Get monthly total costs for linked accounts.
    """
    start_date, end_date = get_start_and_end_date(month)

    filters = {
        "And": [
            {"Dimensions": {"Key": "LINKED_ACCOUNT", "Values": linked_accounts}},
            {"Dimensions": {"Key": "RECORD_TYPE", "Values": ["Usage"]}},
        ]
    }

    results_by_time = get_cost_and_usage(
        client,
        start_date,
        end_date,
        granularity="MONTHLY",
        metrics=["UnblendedCost"],
        filters=filters,
    )

    costs = []
    for result in results_by_time:
        cost_amount = float(result["Total"]["UnblendedCost"]["Amount"])
        cost = Cost(account_name, start_date, end_date, cost_amount)
        costs.append(cost)
    return costs


def chunk_list(lst, chunk_size):
    for i in range(0, len(lst), chunk_size):
        yield lst[i : i + chunk_size]


def insert_costs(con, costs):
    for cost in costs:
        print(f"Inserting cost: {cost}")
        con.execute(
            query="""
            MERGE INTO costs_per_account c
            USING VALUES ({account_uuid}, {start_date}, {end_date}, {amount}) AS t(account_uuid, start_date, end_date, amount)
            ON t.account_uuid = c.account_uuid AND t.start_date = c.start_date AND t.end_date = c.end_date
            WHEN MATCHED THEN
                UPDATE SET amount = {amount}
            WHEN NOT MATCHED THEN
                INSERT (account_uuid, start_date, end_date, amount)
                VALUES ({account_uuid}, {start_date}, {end_date}, {amount})
            """,
            query_params={
                "account_uuid": cost.account_uuid,
                "start_date": cost.start_date,
                "end_date": cost.end_date,
                "amount": cost.amount,
            },
        )


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <month>")
        sys.exit(1)
    month = sys.argv[1]  # Take the month from the command line argument
    account_uuids = [a[0] for a in query("SELECT DISTINCT account_uuid FROM accounts")]

    def export_costs(con):
        aws_access_key, aws_secret_key, aws_session_token, aws_region = (
            get_aws_credentials()
        )
        client = boto3.client(
            "ce",
            aws_access_key_id=aws_access_key,
            aws_secret_access_key=aws_secret_key,
            aws_session_token=aws_session_token,
            region_name=aws_region,
        )

        print("Getting customer costs")
        for batch in chunk_list(account_uuids, 100):
            costs = get_monthly_cost_per_tag(
                client, month, AWS_CUSTOMER_ACCOUNTS, batch
            )
            insert_costs(con, costs)
        print("Getting unattributed customer costs")
        costs = get_monthly_cost_per_tag(client, month, AWS_CUSTOMER_ACCOUNTS, None)
        insert_costs(con, costs)
        print("Getting control plane costs")
        costs = get_monthly_total_cost(
            client, month, AWS_CONTROL_PLANE_ACCOUNTS, "CONTROL PLANE"
        )
        print(costs)
        insert_costs(con, costs)

    with_connection(export_costs)
