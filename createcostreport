#!/usr/bin/env python3

import pyexasol
import boto3
from datetime import datetime
from configparser import ConfigParser
import os
import sys
from pprint import pprint


config = ConfigParser()
config.read(os.path.join(os.path.dirname(__file__), ".exasolrc"))
DB_DSN = config.get("connection", "dsn")
DB_USER = config.get("connection", "user")
DB_PASSWORD = config.get("connection", "password")
DB_SCHEMA = config.get("connection", "schema")
AWS_PROD_SAAS_ACCOUNT = config.get("aws_accounts", "prod_saas")
AWS_PROD_SAAS_CUSTOMERS_ACCOUNT = config.get("aws_accounts", "prod_saas_customers")
AWS_PROD_SAAS_OFFLINE_BACKUPS_ACCOUNT = config.get(
    "aws_accounts", "prod_saas_offline_backups"
)

AWS_PROFILE = "166629205485_CostExplorerView"
ATTRIBUTION_TAG_KEY = "saas:AccountUUID"


def with_connection(callback):
    connection = None
    try:
        connection = pyexasol.connect(
            dsn=DB_DSN, user=DB_USER, password=DB_PASSWORD, schema=DB_SCHEMA
        )
        return callback(connection)
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        if connection:
            connection.close()

def query(query):
    def execute_query(connection):
        result = connection.execute(query)
        return [row for row in result]

    return with_connection(execute_query)



def cost_data_to_hierarchy(cost_data):
    # Build a nested dict structure from cost_data
    def insert_path(tree, path, value):
        node = tree
        for key in path[:-1]:
            node = node.setdefault(key, {"children": {}, "sum": 0})
            node["sum"] += value
            node = node["children"]
        leaf = path[-1]
        node.setdefault(leaf, {"children": {}, "sum": 0})
        node[leaf]["sum"] += value

    # Build the tree and compute total sum
    tree = {}
    total = 0
    for d in cost_data:
        for k, v in d.items():
            insert_path(tree, k, v)
            total += v

    # Recursively compute percentages and clean up
    def compute_percentages(node, parent_sum, top_sum, is_top_level=False):
        node_sum = node.get("sum", 0)
        # category_percentage: for top-level, use total; for others, use top_sum
        if is_top_level:
            node["category_percentage"] = (
                round(100 * node_sum / total, 1) if total else 100.0
            )
        else:
            node["category_percentage"] = (
                round(100 * node_sum / top_sum, 1) if top_sum else 100.0
            )
        node["total_percentage"] = round(100 * node_sum / total, 1) if total else 100.0
        children = node.get("children", {})
        for key, child in children.items():
            compute_percentages(child, node_sum, top_sum, False)
        node.pop("sum", None)
        if children:
            node["children"] = dict(children)
        else:
            node.pop("children", None)

    # Compute percentages for all top-level nodes
    for key, node in tree.items():
        compute_percentages(node, total, node.get("sum", 0), is_top_level=True)

    return tree


def plot_cost_treemap(cost_data, title, filename):
    total_cost = sum(list(d.values())[0] for d in cost_data)
    title = f"{title} - Total Costs: ${total_cost:,.0f}"
    cost_hierarchy = cost_data_to_hierarchy(cost_data)
    import pandas as pd
    import plotly.express as px

    def build_data(node, path=None):
        data = []
        for key, value in node.items():
            current_path = (path or []) + [f"{key} ({value['category_percentage']}%)"]
            children = value.get("children")
            if children:
                data += build_data(children, current_path)
            else:
                # Only add parent categories to path, leaf node as label
                row = (
                    (path or [])
                    + [f"{key} ({value['category_percentage']}%)"]
                    + [value["total_percentage"]]
                )
                data.append(row)
        return data

    data = build_data(cost_hierarchy)
    if not data:
        print("No data to plot.")
        return

    num_cats = len(data[0]) - 2  # Subtract label and percentage
    cat_columns = [f"Cat {i+1}" for i in range(num_cats)]
    columns = cat_columns + ["Label", "Percentage"]

    df = pd.DataFrame(data, columns=columns)
    fig = px.treemap(df, path=cat_columns + ["Label"], values="Percentage", title=title)
    fig.update_layout(height=600, width=1300)
    fig.update_layout(title_font=dict(size=10))
    fig.write_image(filename, scale=2)


class CostFetcher:
    def __init__(self, start_date, end_date, account_uuid):
        self.start_date = start_date
        self.end_date = end_date
        self.account_uuid = account_uuid
        self.client = self._get_aws_client()

    def _get_aws_client(self):
        aws_access_key = os.getenv("AWS_ACCESS_KEY_ID")
        aws_secret_key = os.getenv("AWS_SECRET_ACCESS_KEY")
        aws_session_token = os.getenv("AWS_SESSION_TOKEN")
        aws_region = os.getenv("AWS_DEFAULT_REGION", "us-east-1")

        if not aws_access_key or not aws_secret_key:
            credentials_path = os.path.expanduser("~/.aws/credentials")
            if os.path.exists(credentials_path):
                config = ConfigParser()
                config.read(credentials_path)
                aws_access_key = config.get(
                    AWS_PROFILE, "aws_access_key_id", fallback=None
                )
                aws_secret_key = config.get(
                    AWS_PROFILE, "aws_secret_access_key", fallback=None
                )
                aws_session_token = config.get(
                    AWS_PROFILE, "aws_session_token", fallback=None
                )
                aws_region = config.get(AWS_PROFILE, "region", fallback=aws_region)

        if not aws_access_key or not aws_secret_key:
            raise EnvironmentError(
                "AWS credentials not set in environment variables or ~/.aws/credentials file."
            )

        return boto3.client(
            "ce",
            aws_access_key_id=aws_access_key,
            aws_secret_access_key=aws_secret_key,
            aws_session_token=aws_session_token,
            region_name=aws_region,
        )

    def get_cost_and_usage(
        self,
        linked_accounts,
        usage_key=None,
        usage_values=None,
        additional_filters=None,
    ):
        filters = {
            "And": [
                {"Tags": {"Key": ATTRIBUTION_TAG_KEY, "Values": [self.account_uuid]}},
                {"Dimensions": {"Key": "RECORD_TYPE", "Values": ["Usage", "SavingsPlanCoveredUsage"]}},
                {"Dimensions": {"Key": "LINKED_ACCOUNT", "Values": linked_accounts}},
            ]
        }
        if usage_key and usage_values:
            filters["And"].insert(
                2,
                {
                    "Dimensions": {
                        "Key": usage_key,
                        "Values": usage_values,
                    }
                },
            )
        if additional_filters:
            filters["And"].extend(additional_filters)
        response = self.client.get_cost_and_usage(
            TimePeriod={"Start": self.start_date, "End": self.end_date},
            Granularity="MONTHLY",
            Metrics=["UnblendedCost"],
            Filter=filters,
        )
        results = response.get("ResultsByTime", [])
        total = 0.0
        for result in results:
            total += float(result["Total"]["UnblendedCost"]["Amount"])
        return round(total, 2)

    def get_traffic_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT, AWS_PROD_SAAS_OFFLINE_BACKUPS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            ["EC2: Data Transfer - Internet (Out)"],
        )

    def get_ebs_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT, AWS_PROD_SAAS_OFFLINE_BACKUPS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            [
                "EC2: EBS - SSD(gp2)",
                "EC2: EBS - SSD(gp3)",
                "EC2: EBS - Snapshots",
                "EC2: EBS Optimized",
            ],
        )

    def get_access_node_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            ["EC2: Running Hours"],
            [{"Tags": {"Key": "aws:cloudformation:logical-id", "Values": ["n10"]}}],
        )

    def get_ec2_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            ["EC2: Running Hours"],
            [
                {
                    "Not": {
                        "Tags": {
                            "Key": "aws:cloudformation:logical-id",
                            "Values": ["n10"],
                        }
                    }
                }
            ],
        )

    def get_s3_storage_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            ["S3: Storage - Standard"],
        )

    def get_s3_storage_api_request_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            ["S3: API Requests - Standard"],
        )

    def get_offline_backups_s3_storage_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_OFFLINE_BACKUPS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            ["S3: Storage - Standard"],
        )

    def get_offline_backups_s3_api_requests_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_OFFLINE_BACKUPS_ACCOUNT],
            "USAGE_TYPE_GROUP",
            ["S3: API Requests - Standard"],
        )

    def get_vpc_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT, AWS_PROD_SAAS_OFFLINE_BACKUPS_ACCOUNT],
            "SERVICE",
            ["Amazon Virtual Private Cloud"],
        )

    def get_total_costs(self):
        return self.get_cost_and_usage(
            [AWS_PROD_SAAS_CUSTOMERS_ACCOUNT, AWS_PROD_SAAS_OFFLINE_BACKUPS_ACCOUNT]
        )

    def get_dimension_values(self, usage_key):
        response = self.client.get_dimension_values(
            TimePeriod={"Start": self.start_date, "End": self.end_date},
            Dimension=usage_key,
        )
        values = response.get("DimensionValues", [])
        return [value["Value"] for value in values]


def create_cost_report(customer_name, status, account_uuid, start_date, end_date):
    if not customer_name:
        customer_name = "UNKNOWN"
    fetcher = CostFetcher(start_date, end_date, account_uuid)
    total_costs = fetcher.get_total_costs()
    if total_costs == 0:
        print(f"No costs found for {customer_name} ({account_uuid}) from {start_date} to {end_date}.")
        return
    traffic_costs = fetcher.get_traffic_costs()
    ebs_costs = fetcher.get_ebs_costs()
    ec2_costs = fetcher.get_ec2_costs()
    access_node_costs = fetcher.get_access_node_costs()
    s3_storage_costs = fetcher.get_s3_storage_costs()
    s3_storage_api_request_costs = fetcher.get_s3_storage_api_request_costs()
    offline_backups_s3_storage_costs = fetcher.get_offline_backups_s3_storage_costs()
    offline_backups_s3_api_requests_costs = fetcher.get_offline_backups_s3_api_requests_costs()
    vpc_costs = fetcher.get_vpc_costs()
    

    cost_data = [
        {("Customer Costs", "EBS"): ebs_costs},
        {("Customer Costs", "Access Node"): access_node_costs},
        {("Customer Costs", "EC2"): ec2_costs},
        {("Customer Costs", "DB S3 Storage"): s3_storage_costs},
        {("Customer Costs", "Traffic"): traffic_costs},
        {("Customer Costs", "DB S3 Storage API Requests"): s3_storage_api_request_costs},
        {("Customer Costs", "Offline Backup S3 Storage"): offline_backups_s3_storage_costs},
        {("Customer Costs", "Offline Backup S3 API Request"): offline_backups_s3_api_requests_costs},
        {("Customer Costs", "VPC"): vpc_costs}
    ]

    total_attributed_costs = sum(list(d.values())[0] for d in cost_data)
    other_costs = round(total_costs - total_attributed_costs, 2)
    cost_data.append({("Customer Costs", "Other"): other_costs})
    costomer_name_sanitized = customer_name.replace(" ", "_").replace("/", "_")

    plot_cost_treemap(
        cost_data,
        f"{customer_name} {status} {account_uuid} {start_date} - {end_date}",
        f"./treemaps/{costomer_name_sanitized} {account_uuid} {start_date}-{end_date}.png",
    )


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print(
            f"Usage: {sys.argv[0]} <start_date:YYYY-MM-DD> <end_date:YYYY-MM-DD>"
        )
        sys.exit(1)
    start_date = sys.argv[2]
    end_date = sys.argv[3]

    # Validate date format
    try:
        datetime.strptime(start_date, "%Y-%m-%d")
        datetime.strptime(end_date, "%Y-%m-%d")
    except ValueError:
        print("Dates must be in YYYY-MM-DD format.")
        sys.exit(1)
    customers = query("SELECT DISTINCT account_uuid, company, status FROM consumption_report WHERE status IN ('active', 'in_trial')")
    for customer in customers:
        account_uuid = customer[0]
        company = customer[1]
        status = customer[2]
        print(f"Creating treemap for {company} ({account_uuid}, {status}) from {start_date} to {end_date}")
        create_cost_report(company, status, account_uuid, start_date, end_date)
    print("Treemaps created successfully.")

    
    
